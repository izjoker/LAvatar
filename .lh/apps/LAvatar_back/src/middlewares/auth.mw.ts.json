{
    "sourceFile": "apps/LAvatar_back/src/middlewares/auth.mw.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1676085066619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1676085134276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+/* eslint-disable valid-jsdoc */\n import _ from 'lodash';\n import express, {Request, Response, NextFunction} from 'express';\n import ERR from 'http-errors';\n import jwtHelper from '../utils/jwtHelper';\n"
                }
            ],
            "date": 1676085066619,
            "name": "Commit-0",
            "content": "import _ from 'lodash';\nimport express, {Request, Response, NextFunction} from 'express';\nimport ERR from 'http-errors';\nimport jwtHelper from '../utils/jwtHelper';\n/**\n * Verify JWT Token, and inject parsed payload on `req.jwt.payload`\n */\nfunction jwt_authenticate(req: Request, res: Response, next: NextFunction) {\n    let jwtToken = null;\n    console.log('req.headers.authorization: ', req.headers.authorization);\n    if (req.headers.authorization && req.headers.authorization.split(' ')[0] === 'Bearer') {\n        jwtToken = req.headers.authorization.split(' ')[1];\n    } else {\n        console.log(req.headers.authorization);\n        return next(ERR(401, 'invalid authentication token', {exception_code: 1, path: req.path}));\n    }\n    console.log('req.headers.authorization: ', req.headers.authorization);\n    console.log('jwtToken: ', jwtToken);\n    const tokenPayload = jwtHelper.verify(jwtToken);\n    if (tokenPayload) {\n        _.set(req, 'jwt.payload', tokenPayload);\n        // TODO put logger here\n        // console.log('token parsed', req.jwt.payload);\n        return next();\n    } else {\n        return next(\n            ERR(401, 'invalid authentication token', {\n                exception_code: 2,\n                payload: tokenPayload,\n                path: req.path,\n            }),\n        );\n    }\n}\nexports.jwt_authenticate = jwt_authenticate;\n\n\nconst authMw = {\n    jwt_authenticate,\n};\nexport default authMw;\n"
        }
    ]
}