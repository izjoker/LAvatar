{
    "sourceFile": "apps/LAvatar_back/src/core/fulgurite/fulguriteConfig.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1676085056302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1676085056302,
            "name": "Commit-0",
            "content": "import path from 'path';\nimport fs from 'fs';\nimport _ from 'lodash';\nimport YAML from 'js-yaml';\nimport process from 'process';\n\ninterface FulguriteConfigOptions {\n    configDir: string;\n    defaultDir: string;\n    auto: boolean;\n    max_depth: number;\n}\n\n\nexport default class FulguriteConfig {\n    moduleName: string;\n    options?: FulguriteConfigOptions;\n    configDir: string;\n    defaultDir: string;\n    buildTarget: string;\n    config: any;\n\n    constructor({moduleName, buildTarget, options}: { moduleName?: string; buildTarget?: string; options?: FulguriteConfigOptions } = {}) {\n        this.moduleName = moduleName || 'config';\n        this.options = options || ({} as FulguriteConfigOptions);\n        this.defaultDir = process.env.Fulgurite_DEFAULT_DIR || process.cwd();\n        this.configDir = process.env.Fulgurite || path.join(process.cwd(), 'config');\n        this.buildTarget = buildTarget || process.env.NODE_ENV || 'development';\n\n        this.load();\n\n        return this;\n    }\n\n    static fileName(moduleName: string, buildTarget: string) {\n        return moduleName ? moduleName.concat('.', buildTarget) : buildTarget;\n    }\n\n    prepareDefault() {\n        const defaultFileName = FulguriteConfig.fileName(this.moduleName, 'default') + '.yaml';\n        const defaultFilePath = path.join(this.defaultDir, defaultFileName);\n        const configDefaultPath = path.join(this.configDir, defaultFileName);\n\n        // load both origin default file and default configuration file\n        /**\n         * @type {Buffer}\n         */\n        let originDefaultBuf = null;\n        let destDefaultBuf = null;\n        try {\n            originDefaultBuf = fs.readFileSync(defaultFilePath);\n        } catch (e) {\n            console.log(e);\n        }\n        try {\n            destDefaultBuf = fs.readFileSync(configDefaultPath);\n        } catch (e) {\n            console.log(e);\n        }\n\n        // check default files\n        if (!originDefaultBuf) {\n            console.warn('default file does not exist. load configuration without default');\n        } else if (!destDefaultBuf) {\n            fs.copyFileSync(defaultFilePath, configDefaultPath);\n            console.info('default file in config directory is not exist. generate it from default');\n        } else if (!originDefaultBuf.equals(destDefaultBuf)) {\n            fs.copyFileSync(defaultFilePath, configDefaultPath);\n            console.info('default file in config directory is not fresh. update it to new version');\n        } else {\n            console.log('default file is exist');\n        }\n    }\n\n    /**\n     * Load all config\n     * @return {*}\n     */\n    load() {\n        this.loadConfig();\n\n        return this;\n    }\n\n    static loadFile(filePath: string) {\n        try {\n            return YAML.load(fs.readFileSync(filePath, 'utf8'), {json: true, filename: filePath});\n        } catch (e) {\n            console.warn('load configuration file failed', filePath);\n            console.error(e);\n            return {};\n        }\n    }\n\n    /**\n     * load default and user config from files.\n     * if cache flag is set, update cache also\n     * @return {Config}\n     */\n    loadConfig() {\n        this.prepareDefault();\n\n        // get default config\n        const defaultFileName = FulguriteConfig.fileName(this.moduleName, 'default') + '.yaml';\n        const defaultFilePath = path.join(this.configDir, defaultFileName);\n        const defaultConfig = FulguriteConfig.loadFile(defaultFilePath);\n\n        const configFileName = FulguriteConfig.fileName(this.moduleName, this.buildTarget) + '.yaml';\n        const configFilePath = path.join(this.configDir, configFileName);\n        const userConfig = FulguriteConfig.loadFile(configFilePath);\n\n        console.log('defaultFilePath', defaultFilePath);\n        console.log('defaultConfig', defaultConfig);\n        console.log('configFilePath', configFilePath);\n        console.log('userConfig', userConfig);\n        this.config = extendDeep(defaultConfig, userConfig);\n        console.log('merged:', this.config);\n\n        return this;\n    }\n\n\n    /**\n     * return config value in path\n     * if path is not valid, return undefined\n     * @param {string | array} [path]\n     * @return {*}\n     */\n    get(path?: string | Array<string>) {\n        return path ? _.get(this.config, path) : this.config;\n    }\n}\nfunction extendDeep(defaultObj: any, configObj: any): any {\n    // console.log(\"defaultObj\", defaultObj)\n    // console.log(\"configObj\", configObj)\n    if (_.isArray(defaultObj) && _.isArray(configObj)) {\n        return configObj;\n    } else if (typeof defaultObj === 'object' && typeof configObj === 'object') {\n        return _.assignWith(defaultObj, configObj, extendDeep);\n    } else if (typeof defaultObj === 'undefined') {\n        console.warn(`config ${configObj} (${typeof configObj}) is not defined on default`);\n        return configObj;\n    } else if (typeof defaultObj !== typeof configObj) {\n        console.warn(\n            `config type mismatch, default is ${defaultObj}(${typeof defaultObj})` +\n                `but config is ${configObj} (${typeof configObj})`,\n        );\n        return defaultObj;\n    } else {\n        return configObj;\n    }\n}\n"
        }
    ]
}