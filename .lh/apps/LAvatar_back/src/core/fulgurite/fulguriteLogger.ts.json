{
    "sourceFile": "apps/LAvatar_back/src/core/fulgurite/fulguriteLogger.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1676085060354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1676085060354,
            "name": "Commit-0",
            "content": "\nimport _ from 'lodash';\nimport winston from 'winston';\nimport winstonDailyRotateFile from 'winston-daily-rotate-file';\nimport Transport from 'winston-transport';\n/**\n * @typedef {object}    CONFIG_LOG\n * @property {string}  [file_level='debug']\n * @property {string}  [console_level='debug']\n * @property {string}  [logPath='./log']\n */\n\n/**\n * @param userTransports\n * @param {CONFIG_LOG} config\n * @returns {winston.Logger}\n */\n\n\nfunction createLogger(userTransports: Transport[] | null, config: any = {}) {\n    const transports = userTransports || [];\n\n    // Winston Daily Rotate File : https://github.com/winstonjs/winston-daily-rotate-file\n    const LOG_FILE_LEVEL = config.file_level || 'debug';\n    if (LOG_FILE_LEVEL !== 'disable') {\n        const defaultOptions = {\n            level: LOG_FILE_LEVEL,\n            dirname: config.logPath || './log',\n            filename: `${process.env.npm_package_name}-%DATE%.log`,\n            zippedArchive: true,\n            maxSize: '20m',\n            maxFiles: '50',\n            format: winston.format.combine(winston.format.timestamp(), winston.format.json()),\n        };\n        const rotatedTransport = new winstonDailyRotateFile(_.assign({}, defaultOptions, config));\n        /**\n         * @property {function} winston.transports.DailyRotateFile.prototype.on - rotate hook\n         */\n        rotatedTransport.on('rotate', function(oldFilename, newFilename) {\n            logger.info('logfile rotated, oldFileName: ' + oldFilename + ', newFileName' + newFilename);\n        });\n        transports.push(rotatedTransport);\n    }\n\n    // Winston Console Transports\n    const LOG_CONSOLE_LEVEL = config.console_level || 'debug';\n    if (LOG_CONSOLE_LEVEL !== 'disabled') {\n        // https://github.com/winstonjs/winston/blob/master/docs/transports.md\n        const consoleTransport = new winston.transports.Console({\n            format: winston.format.combine(\n                winston.format.colorize(),\n                winston.format.align(),\n                winston.format.timestamp(),\n                winston.format.printf((info) => {\n                    const {timestamp, level, message, ...args} = info;\n                    const ts = timestamp.replace('T', ' ');\n                    return `${ts} [${level}]: ${message} ${Object.keys(args).length ? '\\n' + prettyJ(args) : ''}`;\n                }),\n            ),\n            level: LOG_CONSOLE_LEVEL,\n        });\n        transports.push(consoleTransport);\n    }\n\n    const logger: winston.Logger = winston.createLogger({\n        levels: winston.config.syslog.levels,\n        transports: transports,\n    });\n\n    // colorize stringified json on terminal\n    function prettyJ(json: any) {\n        if (typeof json !== 'string') {\n            json = JSON.stringify(json, undefined, 2);\n        }\n        return json.replace(\n            /(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/g,\n            function(match: string) {\n                let cls = '\\x1b[36m';\n                if (/^\"/.test(match)) {\n                    if (/:$/.test(match)) {\n                        cls = '\\x1b[34m';\n                    } else {\n                        cls = '\\x1b[32m';\n                    }\n                } else if (/true|false/.test(match)) {\n                    cls = '\\x1b[35m';\n                } else if (/null/.test(match)) {\n                    cls = '\\x1b[31m';\n                }\n                return cls + match + '\\x1b[0m';\n            },\n        );\n    }\n\n    /**\n     * @alias\n     * @deprecated use warning instead\n     * @returns {Logger}\n     */\n    logger.warn = logger.warning;\n\n    return logger;\n}\n\nexport default createLogger;\n"
        }
    ]
}