{
    "sourceFile": "apps/LAvatar_back/src/routers/users.router.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1675999220793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1675999232335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,26 +54,6 @@\n         }\n     }),\n );\n \n-// const allowedToUpdate = ['settings', 'username'];\n-// router.put(\n-//     '/:id',\n-//     authMw.jwt_authenticate,\n-//     expressAsyncHandler(async function (req, res) {\n-//         const tokenId = _.get(req, 'jwt.payload.id');\n-//         if (req.params.id !== tokenId) {\n-//             res.status(401).json({ msg: 'not authorized' });\n-//             return;\n-//         }\n-//         const updateBody = _.pick(req.body, allowedToUpdate);\n-//         const updated = await User.findByIdAndUpdate(tokenId, updateBody, { new: true });\n-//         if (updated) {\n-//             res.json(updated);\n-//             return;\n-//         } else {\n-//             throw ERR(400, 'badRequest');\n-//         }\n-//     }),\n-// );\n \n export default router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1675999274951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,6 +54,26 @@\n         }\n     }),\n );\n \n+// const allowedToUpdate = ['settings', 'username'];\n+// router.put(\n+//     '/:id',\n+//     authMw.jwt_authenticate,\n+//     expressAsyncHandler(async function (req, res) {\n+//         const tokenId = _.get(req, 'jwt.payload.id');\n+//         if (req.params.id !== tokenId) {\n+//             res.status(401).json({ msg: 'not authorized' });\n+//             return;\n+//         }\n+//         const updateBody = _.pick(req.body, allowedToUpdate);\n+//         const updated = await User.findByIdAndUpdate(tokenId, updateBody, { new: true });\n+//         if (updated) {\n+//             res.json(updated);\n+//             return;\n+//         } else {\n+//             throw ERR(400, 'badRequest');\n+//         }\n+//     }),\n+// );\n \n export default router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1675999429822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,45 @@\n-import ERR from 'http-errors'\n-import _ from 'lodash'\n-import express from 'express'\n-import expressAsyncHandler from 'express-async-handler'\n-import authMw from '../middlewares/auth.mw'\n-import DB from '../models/lavatar/index'\n+import ERR from 'http-errors';\n+import _ from 'lodash';\n+import express from 'express';\n+import expressAsyncHandler from 'express-async-handler';\n+import authMw from '../middlewares/auth.mw';\n+import DB from '../models/lavatar/index';\n \n- \n- \n \n const User = DB.model('User');\n \n-let router = express.Router();\n+const router = express.Router();\n \n \n router.get(\n     '/me',\n-    authMw.jwt_authenticate, \n-    expressAsyncHandler(async function (req, res) {\n+    authMw.jwt_authenticate,\n+    expressAsyncHandler(async function(req, res) {\n         const tokenUser = await User.findById(_.get(req, 'jwt.payload.id'));\n         if (!tokenUser) {\n-            throw ERR(404, 'user not found', { details: { userId: _.get(req, 'jwt.payload.id') } });\n+            throw ERR(404, 'user not found', {details: {userId: _.get(req, 'jwt.payload.id')}});\n         }\n         res.json(tokenUser);\n         return;\n     }),\n );\n \n router.get(\n-    '/', \n-    expressAsyncHandler(async function (req, res) {\n+    '/',\n+    expressAsyncHandler(async function(req, res) {\n         res.json(User);\n-        console.log(User)\n+        console.log(User);\n         return;\n     }),\n );\n \n router.post(\n     '/',\n-    expressAsyncHandler(async function (req, res) {\n-        console.log('req', req)\n-        console.log('req.body: ', req.body)\n+    expressAsyncHandler(async function(req, res) {\n+        console.log('req', req);\n+        console.log('req.body: ', req.body);\n         if (_.get(req, 'body.email') && _.get(req, 'body.password')) {\n-            \n             const userInfo = _.pick(req.body, ['email', 'password', 'username']);\n             const newUser = new User(userInfo);\n             const createdUser = await newUser.save().catch((e) => {\n                 throw ERR(400, 'user creation failed', e);\n@@ -75,5 +72,5 @@\n //         }\n //     }),\n // );\n \n-export default router;\n\\ No newline at end of file\n+export default router;\n"
                }
            ],
            "date": 1675999220793,
            "name": "Commit-0",
            "content": "import ERR from 'http-errors'\nimport _ from 'lodash'\nimport express from 'express'\nimport expressAsyncHandler from 'express-async-handler'\nimport authMw from '../middlewares/auth.mw'\nimport DB from '../models/lavatar/index'\n\n \n \n\nconst User = DB.model('User');\n\nlet router = express.Router();\n\n\nrouter.get(\n    '/me',\n    authMw.jwt_authenticate, \n    expressAsyncHandler(async function (req, res) {\n        const tokenUser = await User.findById(_.get(req, 'jwt.payload.id'));\n        if (!tokenUser) {\n            throw ERR(404, 'user not found', { details: { userId: _.get(req, 'jwt.payload.id') } });\n        }\n        res.json(tokenUser);\n        return;\n    }),\n);\n\nrouter.get(\n    '/', \n    expressAsyncHandler(async function (req, res) {\n        res.json(User);\n        console.log(User)\n        return;\n    }),\n);\n\nrouter.post(\n    '/',\n    expressAsyncHandler(async function (req, res) {\n        console.log('req', req)\n        console.log('req.body: ', req.body)\n        if (_.get(req, 'body.email') && _.get(req, 'body.password')) {\n            \n            const userInfo = _.pick(req.body, ['email', 'password', 'username']);\n            const newUser = new User(userInfo);\n            const createdUser = await newUser.save().catch((e) => {\n                throw ERR(400, 'user creation failed', e);\n            });\n            res.json(createdUser);\n            return;\n        } else {\n            throw ERR(400, 'password and email should be passed');\n        }\n    }),\n);\n\n// const allowedToUpdate = ['settings', 'username'];\n// router.put(\n//     '/:id',\n//     authMw.jwt_authenticate,\n//     expressAsyncHandler(async function (req, res) {\n//         const tokenId = _.get(req, 'jwt.payload.id');\n//         if (req.params.id !== tokenId) {\n//             res.status(401).json({ msg: 'not authorized' });\n//             return;\n//         }\n//         const updateBody = _.pick(req.body, allowedToUpdate);\n//         const updated = await User.findByIdAndUpdate(tokenId, updateBody, { new: true });\n//         if (updated) {\n//             res.json(updated);\n//             return;\n//         } else {\n//             throw ERR(400, 'badRequest');\n//         }\n//     }),\n// );\n\nexport default router;"
        }
    ]
}