{
    "sourceFile": "apps/LAvatar_back/src/models/lavatar/PackageDict.model.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1676018306287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1676084364943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,11 @@\n         }\n         function writeIdMap(prices) {\n             const idMap = {};\n             for (const id in prices) {\n-                idMap[id] = prices[id]['id_num'];\n+                if ({}.hasOwnProperty()) {\n+                    idMap[id] = prices[id]['id_num'];\n+                }\n             }\n             fs.writeFileSync(__dirname+'/../../../assets/debug/idMap.json', JSON.stringify(idMap, null, 4));\n         }\n         function writeMergedItems(mergedItems) {\n"
                },
                {
                    "date": 1676084394629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         }\n         function writeIdMap(prices) {\n             const idMap = {};\n             for (const id in prices) {\n-                if ({}.hasOwnProperty()) {\n+                if ({}.hasOwnProperty.call(idMap, id)) {\n                     idMap[id] = prices[id]['id_num'];\n                 }\n             }\n             fs.writeFileSync(__dirname+'/../../../assets/debug/idMap.json', JSON.stringify(idMap, null, 4));\n"
                },
                {
                    "date": 1676084405662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         }\n         function writeIdMap(prices) {\n             const idMap = {};\n             for (const id in prices) {\n-                if ({}.hasOwnProperty.call(idMap, id)) {\n+                if ({}.hasOwnProperty.call(prices, id)) {\n                     idMap[id] = prices[id]['id_num'];\n                 }\n             }\n             fs.writeFileSync(__dirname+'/../../../assets/debug/idMap.json', JSON.stringify(idMap, null, 4));\n"
                },
                {
                    "date": 1676084537521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n         }\n         function writeMergedItems(mergedItems) {\n             fs.writeFileSync(__dirname+'/../../../assets/debug/merged.json', JSON.stringify(mergedItems, null, 4));\n         }\n-        const prices = require('./../../../assets/debug/prices_dummy.json');\n+        const prices = JSON.parse(fs.readFileSync('assets/debug/prices_dummy.json', 'utf-8'));\n         const {mergedItems, rests} = await this.assignmentItems_debug(this.constItems, prices);\n         writeNotPricedItems(rests);\n         writeIdMap(prices);\n         writeMergedItems(mergedItems);\n"
                },
                {
                    "date": 1676084593721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,12 +78,14 @@\n \n     async assignmentItems(constItems: object, itemsWithPrice: object) {\n         const r = constItems;\n         for (const id in itemsWithPrice) {\n-            try {\n-                r[id] = Object.assign(constItems[id], itemsWithPrice[id]);\n-            } catch (e) {\n-                // console.log(`no Data for this id: ${id}`)\n+            if ({}.hasOwnProperty.call(itemsWithPrice, id)) {\n+                try {\n+                    r[id] = Object.assign(constItems[id], itemsWithPrice[id]);\n+                } catch (e) {\n+                    // console.log(`no Data for this id: ${id}`)\n+                }\n             }\n         }\n         return r;\n     }\n"
                },
                {
                    "date": 1676084623191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,13 +93,15 @@\n     async assignmentItems_debug(constItems: object, itemsWithPrice: object) {\n         const r1 = constItems;\n         const r2 = {};\n         for (let id in itemsWithPrice) {\n-            id = id.normalize('NFC');\n-            try {\n-                r1[id] = Object.assign(constItems[id], itemsWithPrice[id]);\n-            } catch (e) {\n-                r2[id] = itemsWithPrice[id]['id_num'];\n+            if ({}.hasOwnProperty.call(itemsWithPrice, id)) {\n+                id = id.normalize('NFC');\n+                try {\n+                    r1[id] = Object.assign(constItems[id], itemsWithPrice[id]);\n+                } catch (e) {\n+                    r2[id] = itemsWithPrice[id]['id_num'];\n+                }\n             }\n         }\n         return {mergedItems: r1, rests: r2};\n     }\n"
                }
            ],
            "date": 1676018306287,
            "name": "Commit-0",
            "content": "import fs from 'fs';\nimport LostarkAPI from './lostarkAPI.model';\nimport CacheLocal from './../../cache/cache';\n\nexport class PackageDict {\n    lostarkAPI: LostarkAPI;\n    constItems: object;\n    pricedItems: object;\n\n    constructor() {\n        this.lostarkAPI = new LostarkAPI();\n\n        this.constItems = require('./../../../assets/packageDict/packageItems_const.json');\n        // await this.debug()\n        if (CacheLocal.get('pricedItems')) {\n            this.pricedItems = CacheLocal.get('pricedItems');\n            console.log('got datas from cache');\n        }\n    }\n\n    async debug() {\n        // 획득한 가격정보, 입력 안된 아이템들, string id - number id 맵 파일출력\n        // 입력 안된 아이템, id맵은 누적, 가격정보는 갱신\n        //\n        function writeNotPricedItems(rests) {\n            console.log('length of not priced items:', Object.keys(rests).length);\n            fs.writeFileSync(__dirname+'/../../../assets/debug/notPricedItems.json', JSON.stringify(rests, null, 4));\n        }\n        function writeIdMap(prices) {\n            const idMap = {};\n            for (const id in prices) {\n                idMap[id] = prices[id]['id_num'];\n            }\n            fs.writeFileSync(__dirname+'/../../../assets/debug/idMap.json', JSON.stringify(idMap, null, 4));\n        }\n        function writeMergedItems(mergedItems) {\n            fs.writeFileSync(__dirname+'/../../../assets/debug/merged.json', JSON.stringify(mergedItems, null, 4));\n        }\n        const prices = require('./../../../assets/debug/prices_dummy.json');\n        const {mergedItems, rests} = await this.assignmentItems_debug(this.constItems, prices);\n        writeNotPricedItems(rests);\n        writeIdMap(prices);\n        writeMergedItems(mergedItems);\n        this.pricedItems = mergedItems;\n    }\n    async getItems() {\n        if (!this.pricedItems) {\n            console.log('returning constItems');\n            return this.constItems;\n        } else {\n            console.log('returning pricedItems');\n            return this.pricedItems;\n        }\n    }\n\n    async mainRoutine() {\n        // 60분마다 LostarkAPI에 요청하여 가격정보 획득 - 파일, 캐시로 출력\n        try {\n            const prices = await this.lostarkAPI.getItemPriceData();\n            this.pricedItems = await this.assignmentItems(this.constItems, prices);\n\n            // 캐시입력\n            CacheLocal.set('pricedItems', this.pricedItems);\n            // 로컬저장\n            fs.mkdirSync(__dirname+'/../../../assets/packageDict/', {recursive: true});\n            fs.writeFileSync(__dirname+`/../../../assets/logs/packageItems_priced_${new Date().toJSON().slice(0, 13)}.json`, JSON.stringify(prices, null, 4));\n        } catch (e) {\n            console.log(e);\n            console.log('Failed to receive Priced item datas. will retry after 60s.');\n            setTimeout(()=>this.mainRoutine(), 60 * 1000);\n            return;\n        }\n\n        setTimeout(()=>this.mainRoutine(), 60 * 60 * 1000);\n    }\n\n    async assignmentItems(constItems: object, itemsWithPrice: object) {\n        const r = constItems;\n        for (const id in itemsWithPrice) {\n            try {\n                r[id] = Object.assign(constItems[id], itemsWithPrice[id]);\n            } catch (e) {\n                // console.log(`no Data for this id: ${id}`)\n            }\n        }\n        return r;\n    }\n\n    async assignmentItems_debug(constItems: object, itemsWithPrice: object) {\n        const r1 = constItems;\n        const r2 = {};\n        for (let id in itemsWithPrice) {\n            id = id.normalize('NFC');\n            try {\n                r1[id] = Object.assign(constItems[id], itemsWithPrice[id]);\n            } catch (e) {\n                r2[id] = itemsWithPrice[id]['id_num'];\n            }\n        }\n        return {mergedItems: r1, rests: r2};\n    }\n}\n\nconst packageDict = new PackageDict();\n\nexport default packageDict;\n"
        }
    ]
}