{
    "sourceFile": "apps/LAvatar_front/src/components/avatarpage/packageitems/LeafOverall.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1675998095642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1675998255183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n \n import {useRecoilState} from 'recoil';\n import {packageItems, selectedPackageIdState} from '../../../stores/itemPackageStore.atom';\n-import LeafOverall_Avatar from './LeafOverall_Avatar';\n-import LeafOverall_Weapon from './LeafOverall_Weapon';\n-import LeafOverall_Instrument from './LeafOverall_Instrument';\n-import LeafOverall_Mount from './LeafOverallMount';\n-import LeafOverall_Pet from './LeafOverall_Pet';\n+import LeafOverallAvatar from './LeafOverallAvatar';\n+import LeafOverallWeapon from './LeafOverallWeapon';\n+import LeafOverallInstrument from './LeafOverallInstrument';\n+import LeafOverallMount from './LeafOverallMount';\n+import LeafOverallPet from './LeafOverallPet';\n \n function LeafOverall(props) {\n     const [items, setItems] = useRecoilState(packageItems);\n     const [selectedPackageId, setSelectedPackageId] = useRecoilState(selectedPackageIdState);\n"
                },
                {
                    "date": 1675998267538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,13 +59,13 @@\n     }\n \n     return (\n         <div className=\"LeafOverall\">\n-            {leafMap['avatar'].length !== 0 && <LeafOverall_Avatar avatars={leafMap['avatar']} />}\n-            {leafMap['weapon'].length !== 0 && <LeafOverall_Weapon weapons={leafMap['weapon']} />}\n-            {leafMap['instrument'].length !== 0 && <LeafOverall_Instrument instruments={leafMap['instrument']} />}\n-            {leafMap['mount'].length !== 0 && <LeafOverall_Mount mounts={leafMap['mount']} />}\n-            {leafMap['pet'].length !== 0 && <LeafOverall_Pet pets={leafMap['pet']} />}\n+            {leafMap['avatar'].length !== 0 && <LeafOverallAvatar avatars={leafMap['avatar']} />}\n+            {leafMap['weapon'].length !== 0 && <LeafOverallWeapon weapons={leafMap['weapon']} />}\n+            {leafMap['instrument'].length !== 0 && <LeafOverallInstrument instruments={leafMap['instrument']} />}\n+            {leafMap['mount'].length !== 0 && <LeafOverallMount mounts={leafMap['mount']} />}\n+            {leafMap['pet'].length !== 0 && <LeafOverallPet pets={leafMap['pet']} />}\n         </div>\n     );\n }\n export default LeafOverall;\n"
                }
            ],
            "date": 1675998095642,
            "name": "Commit-0",
            "content": "\nimport {useRecoilState} from 'recoil';\nimport {packageItems, selectedPackageIdState} from '../../../stores/itemPackageStore.atom';\nimport LeafOverall_Avatar from './LeafOverall_Avatar';\nimport LeafOverall_Weapon from './LeafOverall_Weapon';\nimport LeafOverall_Instrument from './LeafOverall_Instrument';\nimport LeafOverall_Mount from './LeafOverallMount';\nimport LeafOverall_Pet from './LeafOverall_Pet';\n\nfunction LeafOverall(props) {\n    const [items, setItems] = useRecoilState(packageItems);\n    const [selectedPackageId, setSelectedPackageId] = useRecoilState(selectedPackageIdState);\n    const leafItems = [...new Set(searchLeafs(items[selectedPackageId], []))];\n    const leafMap = categorizeLeafs(leafItems);\n\n    function searchLeafs(item, leafItemLst) {\n        if (item['contain'].length === 0) {\n            leafItemLst.push(item);\n            return;\n        }\n        for (const child of getChildren(item)) {\n            searchLeafs(child, leafItemLst);\n        }\n        return leafItemLst;\n    }\n    function getChildren(item) {\n        const r = [];\n        for (const containedItem of item['contain']) {\n            for (const childId of containedItem['itemIdLst']) {\n                const child = items[childId];\n                r.push(child);\n            }\n        }\n        return r;\n    }\n    function categorizeLeafs(leafItems) {\n        const r = {\n            'avatar': [],\n            'weapon': [],\n            'instrument': [],\n            'mount': [],\n            'pet': [],\n        };\n\n        for (const leafItem of leafItems) {\n            if (leafItem['type'].includes('avatar')) {\n                r['avatar'].push(leafItem);\n            } else if (leafItem['type'] === 'weapon') {\n                r['weapon'].push(leafItem);\n            } else if (leafItem['type'] === 'instrument') {\n                r['instrument'].push(leafItem);\n            } else if (leafItem['type'] === 'mount') {\n                r['mount'].push(leafItem);\n            } else if (leafItem['type'] === 'pet') {\n                r['pet'].push(leafItem);\n            }\n        }\n        return r;\n    }\n\n    return (\n        <div className=\"LeafOverall\">\n            {leafMap['avatar'].length !== 0 && <LeafOverall_Avatar avatars={leafMap['avatar']} />}\n            {leafMap['weapon'].length !== 0 && <LeafOverall_Weapon weapons={leafMap['weapon']} />}\n            {leafMap['instrument'].length !== 0 && <LeafOverall_Instrument instruments={leafMap['instrument']} />}\n            {leafMap['mount'].length !== 0 && <LeafOverall_Mount mounts={leafMap['mount']} />}\n            {leafMap['pet'].length !== 0 && <LeafOverall_Pet pets={leafMap['pet']} />}\n        </div>\n    );\n}\nexport default LeafOverall;\n"
        }
    ]
}