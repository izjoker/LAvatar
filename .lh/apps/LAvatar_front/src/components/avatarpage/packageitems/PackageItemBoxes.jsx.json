{
    "sourceFile": "apps/LAvatar_front/src/components/avatarpage/packageitems/PackageItemBoxes.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1675998088662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1675998088662,
            "name": "Commit-0",
            "content": "import {useRecoilState} from 'recoil';\nimport {packageItems, selectedLeafItemIdState, selectedPackageIdState} from '../../../stores/itemPackageStore.atom';\nimport ItemCard from './ItemCard';\nimport _ from 'lodash';\n\nexport default function PackageItemBoxes({type}) {\n    const [items, setItems] = useRecoilState(packageItems);\n    const [selectedPackageId, setSelectedPackageId] = useRecoilState(selectedPackageIdState);\n    const selectedPackage = items[selectedPackageId];\n    const categories = ['avatar', 'weapon', 'instrument', 'mount', 'pet'];\n    const categorizedBoxes = function(packageSpec, categories) {\n        const r = {};\n        for (const containedItem of packageSpec['contain']) {\n            if (r[containedItem['category']] === undefined) {\n                r[containedItem['category']] = [];\n            }\n            r[containedItem['category']] = r[containedItem['category']].concat(containedItem['itemIdLst']);\n        }\n\n        return r;\n    }(selectedPackage, categories);\n\n    function getChild(itemSpec) {\n        return _.map(itemSpec.contain, (container) => {\n            return _.map(container.itemIdLst, (id) => {\n                const itemObj = items[id];\n                return itemObj;\n            });\n        });\n    }\n\n    function ItemView({itemSpec, depth}) {\n        const [selectedLeafItemId, setSelectedLeafItemId] = useRecoilState(selectedLeafItemIdState);\n        const checkBoxLeaf = (itemSpec) => {\n            if (type === 1) {\n                if (itemSpec['contain'].length === 0 && depth > 0) {\n                    return true;\n                }\n            } else if (type === 3) {\n                if (itemSpec['contain'].length === 0) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        const checkSetCondition = (packageId) => {\n            if (\n                items[packageId]['type'] === 'avatarPackage' ||\n                items[packageId]['type'] === 'weaponPackage' ||\n                items[packageId]['type'] === 'instrumentPackage' ||\n                items[packageId]['type'] === 'mountPackage' ||\n                items[packageId]['type'] === 'petPackage'\n            ) {\n                return true;\n            }\n            return false;\n        };\n        const onPackageId = (packageId) => {\n            if (checkSetCondition(packageId)) {\n                setSelectedLeafItemId(packageId);\n            }\n        };\n\n        try {\n            if (checkBoxLeaf(itemSpec, depth)) {\n                return <></>;\n            }\n\n            if (depth === 0) {\n\n            }\n            let children = _.compact(_.flatten(getChild(itemSpec)));\n            children = [...new Set(children)];\n\n            return <div onClick={(e) => {\n                onPackageId(itemSpec.id);\n                e.stopPropagation();\n            }}>\n                <div>\n                    <ItemCard {...(checkSetCondition(itemSpec['id']) ? {id: 'UnfoldableBox'} : {})} itemSpec={itemSpec} />\n                    {_.map(children, (c) =>\n                        <div key={`${c['id']}_${itemSpec['id']}`} style={{marginLeft: '20px'}}>\n                            <ItemView itemSpec={c} depth={depth + 1} />\n                        </div>\n                    )}\n                </div>\n            </div>;\n        } catch (e) {\n            console.log(e);\n            return <div>\n                failed to render itemSpec {JSON.stringify(itemSpec)}\n            </div>;\n        }\n    }\n\n    return (\n        <div className=\"PackageBoxes\">\n            {Object.keys(categorizedBoxes).map((category) =>\n                <div key={category} className=\"PackageBox\" id={category} style={{padding: 5, borderRadius: 8}}>\n                    <pre style={{fontWeight: 'bold'}}>\n                        {capitalizeFirstChar(category)}\n                    </pre>\n                    {categorizedBoxes[category].map((boxId) =>\n                        <ItemView key={boxId} itemSpec={items[boxId]} depth={0} />\n                    )}\n                </div>\n\n            )}\n        </div>\n    );\n}\n\nfunction capitalizeFirstChar(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1, str.length);\n}\n"
        }
    ]
}